service: sofftek-reto-backend
frameworkVersion: "3"

plugins:
  - serverless-esbuild
  - serverless-offline

provider:
  name: aws
  runtime: ${param:runtime, 'nodejs20.x'}
  region: us-east-2
  httpApi:
    cors: true
  environment:
    LOG_LEVEL: debug
    CACHE_TABLE: ${self:service}-${sls:stage}-cache
    HISTORY_TABLE: ${self:service}-${sls:stage}-history
    STORAGE_TABLE: ${self:service}-${sls:stage}-storage
    JWT_SECRET: ${env:JWT_SECRET, 'dev-change-me-please-32bytes'}
    AUTH_USERNAME: ${env:AUTH_USERNAME, 'admin'}
    AUTH_PASSWORD: ${env:AUTH_PASSWORD, 'S0fftek!'}
    RL_FUSIONADOS: ${env:RL_FUSIONADOS, '5'}
    RL_WINDOW: ${env:RL_WINDOW, '60'}

  logs:
    httpApi: true # access logs para HTTP API
  logRetentionInDays: 7
  tracing:
    lambda: true # X-Ray para Lambda
    apiGateway: true # X-Ray para API GW (HTTP API soporta tracing)
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt CacheTable.Arn
        - !GetAtt HistoryTable.Arn
        - !GetAtt StorageTable.Arn

functions:
  login:
    handler: src/handlers/auth.login
    events:
      - httpApi:
          path: /auth/login
          method: post

  fusionados:
    handler: src/handlers/fusionados.handler
    events:
      - httpApi:
          path: /fusionados
          method: get

  almacenar:
    handler: src/handlers/almacenar.handler
    events:
      - httpApi:
          path: /almacenar
          method: post

  historial:
    handler: src/handlers/historial.handler
    events:
      - httpApi:
          path: /historial
          method: get
  openapi:
    handler: src/handlers/docs.openapi
    events:
      - httpApi:
          path: /openapi.json
          method: get

  docs:
    handler: src/handlers/docs.ui
    events:
      - httpApi:
          path: /docs
          method: get

resources:
  Resources:
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CACHE_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true

    HistoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.HISTORY_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE

    StorageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STORAGE_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH

custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    target: node20
    platform: node
  logLevel:
    dev: debug
    prod: info
